using Aspects.SyntaxReceivers;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System.Text;
using TypeInfo = Aspects.SourceGenerators.Common.TypeInfo;
using static Aspects.SourceGenerators.Diagnostics.Errors;
using System.Collections.Generic;
using System.Linq;

namespace Aspects.SourceGenerators.Base
{
    internal abstract class TypeSourceGeneratorBase : ISourceGenerator
    {
        protected abstract string Name { get; }

        protected abstract TypeSyntaxReceiver SyntaxReceiver { get; }

        public void Initialize(GeneratorInitializationContext context)
        {
            context.RegisterForSyntaxNotifications(() => SyntaxReceiver);
        }

        public void Execute(GeneratorExecutionContext context)
        {
            if (context.SyntaxContextReceiver == SyntaxReceiver || context.SyntaxContextReceiver.Equals(SyntaxReceiver))
            {
                foreach (var typeInfo in SyntaxReceiver.IdentifiedTypes)
                {
                    if (!typeInfo.HasPartialModifier)
                        context.ReportDiagnostic(MissingPartialModifier(typeInfo.Symbol, Name));
                    else
                    {
                        var src = GeneratePartialType(typeInfo);
                        context.AddSource($"{typeInfo.Symbol.ContainingNamespace.ToDisplayString()}." +
                            $"{typeInfo.Name.Replace('<', '[').Replace('>', ']')}-{Name}.g.cs", SourceText.From(src, Encoding.UTF8));
                    }
                }
            }
        }

        protected abstract string Dependencies(TypeInfo typeInfo);

        protected virtual IEnumerable<string> InterfacesToAdd(TypeInfo typeInfo)
        {
            return Enumerable.Empty<string>();
        }

        protected abstract string ClassBody(TypeInfo typeInfo);

        private string GeneratePartialType(TypeInfo typeInfo)
        {
            var sb = new StringBuilder();
            sb.AppendLine("// <auto-generated/>");

            var dependencies = Dependencies(typeInfo);
            if(dependencies.Length > 0)
                sb.AppendLine(dependencies);

            sb.AppendLine();

            sb.AppendLine($"namespace {typeInfo.Symbol.ContainingNamespace.ToDisplayString()}");
            sb.AppendLine("{");
            sb.Append('\t');

            sb.Append(typeInfo.Declaration);
            var ifaces = InterfacesToAdd(typeInfo);
            if (!ifaces.Any())
                sb.AppendLine();
            else
                sb.AppendLine($" : {string.Join(", ", ifaces)}");
            sb.AppendLine("\t{");

            sb.AppendLine(ClassBody(typeInfo).Replace("\n", "\n\t\t").Insert(0, "\t\t"));

            sb.AppendLine("\t}");
            sb.Append("}");

            return sb.ToString();
        }
    }
}
