using Aspects.Attributes;
using Aspects.SourceGenerators.Base;
using Aspects.SourceGenerators.Common;
using Aspects.SourceGenerators.SyntaxReceivers;
using Microsoft.CodeAnalysis;
using System.Text;
using TypeInfo = Aspects.SourceGenerators.Common.TypeInfo;

namespace Aspects.SourceGenerators
{
    [Generator]
    public class HashCodeSourceGenerator : TypeSourceGeneratorBase
    {
        private protected override string Name => "HashCode";

        private protected override TypeSyntaxReceiver SyntaxReceiver { get; }
            = new TypeSyntaxReceiver(Types.With<HashCodeAttribute>());

        private protected override string GeneratePartialType(TypeInfo typeInfo)
        {
            var sb = new StringBuilder();
            sb.AppendLine("// <auto-generated/>");

            sb.AppendLine($"namespace {typeInfo.Symbol.ContainingNamespace.ToDisplayString()}");
            sb.AppendLine("{");
            sb.Append('\t');

            sb.AppendLine(typeInfo.Declaration);
            sb.AppendLine("\t{");

            sb.AppendLine("\t\tpublic override int GetHashCode()");
            sb.AppendLine("\t\t{");

            // TODO get properties or fields and generate HashCode

            sb.AppendLine("\t\t}");

            sb.AppendLine("\t}");
            sb.AppendLine("}");

            return sb.ToString();
        }
    }
}
