using Aspects.Attributes;
using Aspects.SourceGenerators.Common;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Aspects.SourceGenerators
{
    [Generator]
    public class PropertyChangedSourceGenerator : ISourceGenerator
    {
        private static readonly string s_notifyName = typeof(NotifyPropertyChangedAttribute).FullName;

        private sealed class FieldSyntaxReciever : ISyntaxContextReceiver
        {
            public Dictionary<string, IReadOnlyList<IFieldSymbol>> IdentifiedClasses { get; }
                = new Dictionary<string, IReadOnlyList<IFieldSymbol>>(512);

            public void OnVisitSyntaxNode(GeneratorSyntaxContext context)
            {
                if (context.Node is TypeDeclarationSyntax node)
                {
                    var fields = Queries.GetFieldsWithAttribute(context, node, s_notifyName).ToArray();
                    if(fields.Length > 0)
                        IdentifiedClasses[Queries.TypeDefinition(node)] = fields;
                }
            }
        }

        public void Initialize(GeneratorInitializationContext context)
        {
            context.RegisterForSyntaxNotifications(() => new FieldSyntaxReciever());
        }

        public void Execute(GeneratorExecutionContext context)
        {
            if (context.SyntaxContextReceiver is FieldSyntaxReciever propertyReciever)
            {
                foreach (var kp in propertyReciever.IdentifiedClasses)
                {
                    var typeInfo = kp.Value[0].ContainingType;

                    var src = GenerateClass(kp.Key, kp.Value);
                    context.AddSource($"{typeInfo.Name}_PropertyChanged.g.cs", SourceText.From(src, Encoding.UTF8));
                }
            }
        }

        private static string GenerateClass(string classDec, IReadOnlyList<IFieldSymbol> fields)
        {
            var type = fields[0].ContainingType;

            var sb = new StringBuilder();
            sb.AppendLine("// <auto-generated/>");
            sb.AppendLine("using System.ComponentModel;");
            sb.AppendLine();

            sb.AppendLine($"namespace {type.ContainingNamespace.ToDisplayString()}");
            sb.AppendLine("{");

            sb.Append('\t');
            sb.AppendLine(classDec);
            sb.AppendLine("\t{");

            if (!type.GetMembers().Any(sy => sy.Name == "PropertyChanged"))
            {
                sb.AppendLine("\t\tpublic event PropertyChangedEventHandler PropertyChanged;");
                sb.AppendLine();
            }

            sb.AppendLine(Property(fields[0]));
            for (int i = 1; i < fields.Count; i++)
            {
                sb.AppendLine();
                sb.AppendLine(Property(fields[i]));
            }

            sb.AppendLine("\t}");
            sb.AppendLine("}");

            return sb.ToString();
        }

        private static string Property(IFieldSymbol field)
        {
            var name = PropertyName(field.Name);
            var sb = new StringBuilder();

            var type = field.Type.ToDisplayString();
            var enableNull = type[type.Length - 1] == '?';

            if (enableNull)
                sb.AppendLine("#nullable enable");

            sb.AppendLine($"\t\tpublic {type} {name}");
            sb.AppendLine("\t\t{");
            sb.AppendLine(Getter(field));
            sb.AppendLine(Setter(field));
            sb.Append("\t\t}");

            if (enableNull)
            {
                sb.AppendLine();
                sb.Append("#nullable restore");
            }

            return sb.ToString();
        }

        private static string Getter(IFieldSymbol field)
        {
            return $"\t\t\tget => {field.Name};";
        }

        private static string Setter(IFieldSymbol field)
        {
            var name = PropertyName(field.Name);
            var sb = new StringBuilder();
            var attData = field.GetAttributes()
                .First(a => a.AttributeClass.ToDisplayString() == s_notifyName);

            var attribute = NotifyPropertyChangedAttribute.FromAttributeData(attData);
            if (attribute.Visibility == SetterVisibility.Public)
                sb.AppendLine("\t\t\tset");
            else
                sb.AppendLine($"\t\t\t{attribute.Visibility.ToDisplayString()} set");

            sb.AppendLine("\t\t\t{");
            if (!attribute.EqualityCheck)
                sb.AppendLine(SetField(field.Name, name, 4));
            else
            {
                if (!field.Type.IsReferenceType)
                    sb.AppendLine($"\t\t\t\tif (!{field.Name}.Equals(value))");
                else
                {
                    sb.AppendLine($"\t\t\t\tif (!({field.Name} is null) && !{field.Name}.Equals(value) " +
                        $"|| {field.Name} is null && !(value is null))");
                }
                sb.AppendLine("\t\t\t\t{");
                sb.AppendLine(SetField(field.Name, name, 5));
                sb.AppendLine("\t\t\t\t}");
            }
            sb.Append("\t\t\t}");

            return sb.ToString();
        }

        private static string SetField(string fieldName, string propName, int indent)
        {
            var sb = new StringBuilder();
            for (int i = 0; i < indent; i++)
                sb.Append('\t');
            sb.AppendLine($"{fieldName} = value;");
            for (int i = 0; i < indent; i++)
                sb.Append('\t');
            sb.Append($"PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof({propName})));");
            return sb.ToString();
        }

        private static string PropertyName(string fieldName)
        {
            while (fieldName.Length > 0 && fieldName[0] == '_')
                fieldName = fieldName.Substring(1);

            if (fieldName.Length > 0 && fieldName[0] >= 'a' && fieldName[0] <= 'z')
                fieldName = char.ToUpper(fieldName[0]) + fieldName.Substring(1);

            return fieldName;
        }
    }
}
